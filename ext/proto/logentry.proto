/*
 * Copyright 2024 The Bazel Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package com.google.idea.blaze.ext;

option java_package = "com.google.idea.blaze.ext";

message IntellijLogEntry {
  optional int64 end_time_millis = 1;
  optional int64 duration_millis = 2;
  optional string product_id = 3;
  optional string product_version = 4;
  optional string product_build_number = 5;
  optional string plugin_id = 6;
  optional string plugin_version = 7;
  optional string username = 8;
  optional string hostname = 9;
  optional uint64 process_id = 10;
  optional string originating_jar = 11;
  optional string g3plugins_version = 12;

  enum Platform {
    UNKNOWN = 0;
    MAC = 1;
    LINUX = 3;
    CHROMEOS = 4;
  }
  optional Platform platform = 13;

  optional EnvironmentInfo environment_info = 14;

  oneof payload {
    Action action = 15;
    Event event = 16;
    CompletionItem completion_item = 17;
    IntellijConfiguration configuration = 18;
    ProjectInfo project_info = 19;
    EditingEvent editing_event = 20;
    IdeArtifactStats ide_artifact_stats = 21;
    EditedFile edited_file = 22;
    FreezeInfo freeze_info = 23;
    LogMessage log_message = 24;
    IndexingDiagnostic indexing_diagnostic = 25;
    QuerySyncAction query_sync_action = 26;
    Command command = 27;
    SyncStats sync_stats = 28;
    HighlightStats highlight_stats = 29;
    RpcCall rpc_call = 30;
    Refactoring refactoring = 31;
  }
}

message LogMessage {
  optional string logger_name = 1;
  optional LogLevel level = 2;
  optional string message = 3;
  optional Exception exception = 4;

  enum LogLevel {
    UNKNOWN_LEVEL = 0;
    TRACE_LEVEL = 1;
    DEBUG_LEVEL = 2;
    INFO_LEVEL = 3;
    WARN_LEVEL = 4;
    ERROR_LEVEL = 5;
    FATAL_LEVEL = 6;
  }
}

message EnvironmentInfo {
  optional bool chrome_remote_desktop = 1;
  enum MachineType {
    UNKNOWN = 0;
    DESKTOP = 1;
    LAPTOP = 2;
    SERVER = 3;
  }
  optional MachineType machine_type = 2;
  optional bool proxy = 3;
}

message UserSetting {
  optional string namespace = 1;
  map<string, string> settings = 2;
}

message ProjectInfo {
  optional bool is_blaze_plugin_project = 1;
  repeated string configured_vcses = 2;
  optional bool has_google3_content_root = 3;
  optional string project_hash = 4;
  repeated UserSetting setting = 5;
  optional ProjectType project_type = 6;

  enum ProjectType {
    UNKNOWN = 0;
    LEGACY_SYNC = 1;
    QUERY_SYNC = 2;
  }
}

message Action {
  optional string action_class = 1;
  optional string action_id = 2;
  optional ProjectInfo project_info = 3;
  optional bool is_from_context_menu = 4;
  optional bool is_from_action_toolbar = 5;
  optional string place = 6;
  optional string tool_window_id = 7;
  optional string project_hash = 8;
  optional string action_text = 9;
  optional string language = 10;
  optional uint32 selected_items = 11;
  optional uint32 selected_files = 12;
  optional uint32 selected_changes = 13;
  optional uint32 selected_changelists = 14;
  optional string file_extension = 15;
  optional uint32 target_changelists = 16;
}

message Event {
  optional string namespace = 6;
  optional string event_type = 1;
  optional int64 end_time_millis = 2;
  optional int64 duration_millis = 3;
  map<string, string> key_value = 4;
  repeated Event subevent = 5;
}

message CompletionItem {
  optional string language = 1;
  optional bool auto_accepted = 2;
  optional int32 selection_index = 5;
  optional int32 completion_length = 7;
}

message IntellijConfiguration {
  message Plugin {
    optional string id = 1;
    optional string name = 2;
    optional string version = 3;
    optional bool enabled = 4;
    optional bool bundled = 5;
  }

  repeated Plugin plugins = 1;
  repeated UserSetting application_setting = 2;
  map<string, string> experiments = 3;
  repeated string jvm_argument = 4;
}

message EditingEvent {
  optional int64 number_of_characters = 1;
  optional string project_hash = 2;
  optional string language = 3;
}

message IdeArtifactStats {
  repeated DirectoryStats directory_stats = 1;

  message DirectoryStats {
    optional string originating_ide_part = 1;
    optional string purpose = 2;
    optional string directory_name = 3;
    optional string path = 4;
    optional int64 size = 5;
    optional int64 max_file_size = 6;
    optional int64 avg_file_size = 7;
    optional int64 file_count = 8;
    repeated FileStats largest_files = 9;

    message FileStats {
      optional string relative_path = 1;
      optional int64 size = 2;
    }
  }
}

message EditedFile {
  optional string language = 1;
  optional string extension = 2;
  optional bool is_from_save = 3;
}

// Contains useful information to be logged when the IDE faces freezes
message FreezeInfo {
  // This is used to group related thread dumps together, since they'll be in
  // different log messages, but have the same start_time.
  optional int64 start_time_millis = 1;
  repeated ThreadInfo thread_info = 2;
  // Indicates if IDE-wide freeze: not just UI thread blocked, but sampling
  // thread too.
  optional bool ide_wide_freeze = 3;
  // User was developing IntelliJ plugins
  optional bool user_was_a_dev = 4;
  // The time since the previous log entry for this freeze event. Used to
  // iteratively combine log entries.
  optional int64 logging_interval_millis = 5;
  // File I/O trace samples since the previous log entry for this freeze event.
  // Should be combined to get the full trace.
  optional FileTrace file_trace = 6;
  // Approximate uptime of the IDE when freeze occurred.
  optional int64 uptime_millis = 7;
}

message ThreadInfo {
  optional string name = 1;
  optional uint64 id = 2;
  optional string state = 3;
  optional string lock_name = 4;
  optional uint64 lock_owner_id = 5;
  repeated StackFrame stack_trace = 6;
}

message Exception {
  optional string class_name = 1;
  optional string message = 2;
  repeated StackFrame stack_trace = 3;
  optional Exception cause = 4;
  repeated Exception suppressed = 5;
}

// these fields come directly from java.lang.StackTraceElement.
message StackFrame {
  optional string class_name = 1;
  optional string method_name = 2;
  optional string filename = 3;
  optional int32 line_number = 4;
}

message FileTrace {
  repeated AggregatedPathSamples samples = 1;
}

message AggregatedPathSamples {
  repeated StackFrame stack_trace = 1;
  // The timestamp of the first file access in the series.
  optional int64 first_sample_ms = 2;
  // Path string -> PathSample.
  // The path is relative or absolute depending on PathKind.
  map<string, PathSample> path_samples = 4;
}

message PathSample {
  optional PathKind path_kind = 1;
  // The first time this file path is accessed with a given stack.
  optional int64 first_sample_ms = 2;
  // Number of times this file path was accessed with a given stack.
  optional int32 count = 3;
  // Total duration of accesses.
  optional int64 total_duration_millis = 4;

  enum PathKind {
    UNKNOWN = 0;
    IN_PROJECT = 1;
    IN_WORKSPACE = 2;
  }
}

message IndexingDiagnostic {
  repeated ProviderStatistic provider_statistics = 1;
  optional int64 total_indexing_time_millis = 2;
  optional string project_hash = 3;
  optional int64 total_updating_time_millis = 4;
  optional int64 scan_files_duration_millis = 5;
  message ProviderStatistic {
    enum ProviderType {
      PROVIDER_TYPE_UNSPECIFIED = 0;
      LIBRARY = 1;
      MODULE = 2;
      JDK = 3;
      SYNTHETIC_LIBRARY = 4;
      SDK = 5;
    }

    enum JarType {
      JAR_TYPE_UNSPECIFIED = 0;
      IJAR = 1;
      HJAR = 2;
    }
    optional string provider_name = 2;
    optional ProviderType provider_type = 3;
    optional int64 total_indexing_time_millis = 6;
    optional string library_hash = 4;
    optional JarType jar_type = 5;
    optional string target = 7;
  }
}

// Handling query sync or build stats
message QuerySyncAction {
  // Time the action was triggered.
  // This is the milliseconds since January 1, 1970 00:00:00 UTC.
  optional int64 start_time_micros = 1;
  optional int64 total_clock_time_ms = 2;
  // The name of action that triggered the query sync
  optional string trigger_action_name = 3;
  // How the action is triggered e.g. short-cut, go to action etc.
  optional string trigger_method = 4;
  // The files that user request with
  repeated string requested_files = 5;
  optional Result result = 6;
  repeated QuerySyncOperation operations = 7;
  repeated string languages_active = 8;
  repeated string blaze_project_files = 9;
  optional DependenciesInfo dependencies_info = 10;
  optional TaskOrigin task_origin = 11;
  // Number of supported targets in the project
  optional int32 project_target_count = 12;
  // Number of external dependencies.
  optional int32 external_dependency_count = 13;
  enum Result {
    UNKNOWN = 0;
    SUCCESS = 1;
    FAILURE = 2;
    SUCCESS_WITH_WARNING = 3;
    CANCELLED = 4;
  }

  enum TaskOrigin {
    UNKNOWN_ORIGIN = 0;
    STARTUP = 1;
    USER_ACTION = 2;
    AUTOMATIC = 3;
  }

  message QuerySyncOperation {
    optional int64 total_clock_time_ms = 3;
    oneof operation {
      SyncQueryStats sync_query_stats = 4;
      BuildDepsStats build_deps_stats = 5;
    }
  }

  message DependenciesInfo {
    optional int32 target_map_size = 1;
    // Number of libraries jars in jar cache
    optional int32 jar_count = 2;
    // Number of library entries of workspace module
    optional int32 library_count = 3;
  }

  message SyncQueryStats {
    optional int32 bazel_exit_code = 1;
    optional SyncMode sync_mode = 2;
    optional BlazeBinaryType blaze_binary_type = 3;
    repeated string query_flags = 4;
    // Bytes of query result
    optional int64 query_result_size_bytes = 5;
  }

  enum SyncMode {
    UNKNOWN_MODE = 0;
    FULL = 1;
    DELTA = 2;
  }

  message BuildDepsStats {
    optional int32 bazel_exit_code = 1;
    // The targets that include requested_files
    repeated string requested_target = 2;
    // The targets to build
    repeated string build_targets = 3;
    // Number of files to download for this build
    optional int32 updated_files_count = 4;
    optional BlazeBinaryType blaze_binary_type = 5;
    repeated string build_flags = 6;
    repeated string build_ids = 7;
    // Bytes of files to download for this build
    repeated int64 artifact_bytes_consumed = 8 [packed = true];
    optional int64 bep_bytes_consumed = 9;
  }
}

enum BlazeBinaryType {
  BLAZE_BINARY_TYPE_UNSPECIFIED = 0;
  BLAZE = 1;
  BAZEL = 2;
  RABBIT = 3;
  CUSTOM_BLAZE_BINARY = 4;
  RABBIT_API = 5;
}

message Command {
  // Namespace specific to the context which invoked this command.
  optional string command_namespace = 1;
  // The path or name of the executable invoked by this command.
  optional string executable = 2;
  // The name of the subcommand, if applicable.
  // For example, "revert" in "hg revert -r tip".
  optional string subcommand_name = 3;
  // All arguments passed to the executable, including subcommand_name.
  repeated string arguments = 4;
  // The absolute path of the working directory the command was invoked from.
  optional string working_directory = 5;
  // Additional data about this command's execution.
  map<string, string> key_value = 6;
  optional int32 exit_code = 7;
}

// A newer version of BlazeSyncStats, handling multiple builds per sync.
message SyncStats {
  // stats for a single build phase
  message BuildPhaseStats {
    repeated string targets = 1;
    repeated string sync_flags = 3;
    optional bool sync_sharded = 4;
    optional BuildInfo build_result = 5;
    optional int64 total_clock_time_ms = 6;
    optional bool targets_derived_from_directories = 7;
    optional int64 shard_count = 8;
    optional bool parallel_builds = 9;
    repeated string build_ids = 10;
    optional ShardStats shard_stats = 11;
    optional int64 bep_bytes_consumed = 12;
  }

  message ShardStats {
    optional ShardingApproach sharding_approach = 1;
    optional int32 suggested_target_size_per_shard = 2;
    // The size may not be evenly on every shard, so record them as a list
    repeated int32 actual_target_size_per_shard = 3 [packed = true];

    enum ShardingApproach {
      NONE = 0;
      PARTITION_WITHOUT_EXPANDING = 1;
      BUILD_TARGET_BATCHING_SERVICE = 2;
      LEXICOGRAPHIC_TARGET_SHARDER = 3;
      ERROR = 4;
    }
  }

  message BuildInfo {
    optional int64 exit_code = 1;
    optional BuildResult status = 2;

    enum BuildResult {
      UNKNOWN = 0;
      SUCCESS = 1;
      BUILD_ERROR = 2;
      FATAL_ERROR = 3;
    }
  }

  message TimedEvent {
    optional string name = 1;
    optional int64 duration_ms = 2;
    optional string type = 3;
    optional bool is_leaf = 4;
  }

  message NetworkBytesUsed {
    optional string reason = 1;
    optional int64 bytes = 2;
  }

  enum SyncMode {
    UNKNOWN_MODE = 0;
    STARTUP = 1;
    FULL = 2;
    INCREMENTAL = 3;
    PARTIAL = 4;
    NO_BUILD = 5;
  }

  // List of sync results.
  enum SyncResult {
    UNKNOWN_RESULT = 0;
    SUCCESS = 1;
    PARTIAL_SUCCESS = 2;
    FAILURE = 3;
    CANCELLED = 4;
  }

  optional SyncMode sync_mode = 1;
  optional string sync_title = 2;
  optional BlazeBinaryType sync_binary_type = 3;
  optional SyncResult sync_result = 4;

  // Timing information covering the entire sync.
  repeated TimedEvent timed_events = 5;
  optional int64 total_clock_time_ms = 6;
  optional int64 blaze_exec_time_ms = 7;
  // Time sync command was initiated.
  // This is the milliseconds since January 1, 1970 00:00:00 UTC.
  optional int64 start_time_in_epoch_time_ms = 8;

  optional string workspace_type = 9;
  repeated string languages_active = 10;

  repeated BuildPhaseStats build_phase_stats = 11;

  optional int64 target_map_size = 12;
  // Number of libraries generated by sync
  optional int32 library_count = 13;
  // A description of what triggered the sync
  optional string sync_origin = 14;
  // Workspace-relative paths of imported .blazeproject files
  repeated string blaze_project_files = 15;
  // Downloads performed as a part of the sync.
  repeated NetworkBytesUsed network_bytes_used = 16;
}

message HighlightStats {
  message HighlightInfo {
    // HighlightInfo Severity, maps IntelliJ's HighlightSeverity
    enum Severity {
      UNKNOWN_SEVERITY = 0;
      INFORMATION = 1;
      GENERIC_SERVER_ERROR_OR_WARNING = 2;
      WEAK_WARNING = 3;
      WARNING = 4;
      ERROR = 5;
    }

    // Type of HighlightInfo
    // Used to track the type of Highlight information logged.
    enum Type {
      UNKNOWN_TYPE = 0;
      WRONG_REF = 1;
      UNUSED_SYMBOL = 2;
      DEPRECATED = 3;
      MARKED_FOR_REMOVAL = 4;
    }

    // Text of the highlighted symbol
    optional string text = 1;
    optional Severity severity = 2;
    optional Type type = 3;
    // Start offset of the highlighted symbol in containing file
    optional int32 start_offset = 4;
    // End offset of the highlighted symbol in containing file
    optional int32 end_offset = 5;
  }

  message FileHighlights {
    // Sync State of the File
    enum FileStatus {
      UNKNOWN = 0;
      UNSYNCED = 1;
      STALE = 2;
      SYNCED = 3;
      RESYNCING = 4;
      IN_PROGRESS = 5;
    }

    optional string file_name = 1;
    // file type: JAVA, XML, etc.
    optional string file_type = 2;
    optional string file_path = 3;
    // Tracks whether the file is in project view
    optional bool is_project_source = 4;
    // Sync state of the file at time of logging
    optional FileStatus sync_status = 5;
    // Highlight information corresponding to one file
    repeated HighlightInfo highlight_info = 6;
  }

  // Group that this HighlightStat belongs to
  // This is used a first level filter to group HighlightStats by the type of
  // highlight information logged.
  enum HighlightStatGroup {
    UNKNOWN = 0;
    ANDROID_RESOURCE_MISSING_REF = 1;
  }

  // Group that this HighlightStat belongs to
  optional HighlightStatGroup group = 1;
  // Last sync mode of the project at the time of stats collection
  optional SyncStats.SyncMode last_sync_mode = 2;
  // Result of the last sync at the time of stats collection
  optional SyncStats.SyncResult last_sync_result = 3;
  // Highlight information collected for files
  repeated FileHighlights file_highlights = 4;
}

// RPC call to an external service.
message RpcCall {
  optional string service_name = 1;
  optional string method_called = 2;
  optional string server_address = 3;
  optional int64 server_elapsed_time_ms = 4;
  optional uint32 canonical_code = 5;
  optional string error_message = 6;
}

message Refactoring {
  message TextRange {
    optional uint32 start_offset = 1;
    optional uint32 start_line = 2;
    optional uint32 start_column = 3;
    optional uint32 end_offset = 4;
    optional uint32 end_line = 5;
    optional uint32 end_column = 6;
    optional string file_path = 7;
  }

  optional string refactoring_id = 1;
  optional string action_class_name = 8;
  optional string action_text = 9;
  optional string workspace_id = 2;
  optional string project_hash = 10;
  // Citc snapshot when the refactoring action was triggered.
  optional uint64 snapshot_before_action = 3;
  // Citc snapshot when the refactoring handler was called.
  optional uint64 snapshot_before_handler = 11;
  optional uint64 snapshot_after = 4;
  // The selected text when the refactoring action was triggered.
  // In case of a caret, the start and end values will be the same.
  optional TextRange selection_before_action = 5;
  // The selected text when the refactoring handler was called.
  // In case of a caret, the start and end values will be the same.
  optional TextRange selection_before_handler = 12;
  // IntelliJ element ranges before the refactoring. Note that this does not
  // include all changed ranges in the file and depends on the refactoring
  // implementation.
  repeated TextRange element_ranges_before_handler = 6;
  // IntelliJ element ranges after the refactoring. Note that this does not
  // include all changed ranges in the file and depends on the refactoring
  // implementation.
  repeated TextRange element_ranges_after = 7;
}
