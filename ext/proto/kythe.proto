/*
 * Copyright 2023 The Bazel Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package com.google.idea.blaze.ext;

option java_package = "com.google.idea.blaze.ext";
option java_multiple_files = true;
option java_outer_classname = "KytheProto";


message FindUsagesRequest {
  // The ticket to query.
  string ticket = 1;
  // The page key to use, if there are more results than our hard-coded limit.
  string page_key = 2;
  // Whether to look for inherited usages only.
  bool inherited_only = 3;
  // Maximum number of results per page
  int32 max_results = 4;
}

message FindUsagesResponse {
  // The use sites that were discovered.
  repeated KytheReference references = 1;
  // The estimated total number of regular use sites.
  int64 estimated_total = 2;
  // The estimated total number of use sites per kind.
  map<string, int64> estimated_kind_total = 3;
  // If non-empty, the paging key to use for the next request.
  string page_key = 4;
}

message Span {
  int32 start_line = 1;
  int32 start_column = 2;
  int32 start_byte_offset = 3;
  int32 end_line = 4;
  int32 end_column = 5;
  int32 end_byte_offset = 6;
}

message KytheReference {
  // Thee workspace-relative path for the usage site.
  WorkspacePath path = 1;
  // The type of reference
  Type type = 2;
  // The position of the reference within the parent file.
  Span span = 3;
  // The kind of reference
  string kind = 4;

  // The type of reference
  enum Type {
    UNSET = 0;
    DECLARATION = 1;
    REFERENCE = 2;
    CALLER = 3;
    RELATED = 4;
    DEFINITION = 5;
  }
}

message GetFileDataRequest {
  WorkspacePath path = 1;
}

message ParsePathRequest {
  string ticket = 1;
}

message WorkspacePath {
  string root = 1;
  string path = 2;
}

message FileData {
  /** The content of the file */
  string content = 1;
  /** All its references */
  repeated FileDataReference references = 2;
  /** Its imports */
  map<string, WorkspacePath> imports = 3;
}

message FileDataReference {
  /** The kind of reference */
  string kind = 1;
  /** The kythe ticket of this referecen */
  string ticket = 2;
  /** The reference target definition */
  string target_definition = 3;
  /** The reference span */
  Span span = 4;
  /** Whether there is node info for this reference */
  bool has_info = 5;
  /** The kind 'fact' of this reference */
  string kind_fact = 6;
  /** The subkind 'fact' of this reference */
  string subkind_fact = 7;
  /** If present, the ticket of this reference definition */
  string definition_ticket = 8;
  /** If present, the span of this reference definitions */
  Span definition_span = 9;
}

service Kythe {
  // Find all usage sites of a given ticket, up to a hard-coded limit.
  rpc FindUsages(FindUsagesRequest) returns (FindUsagesResponse) {}

  // Returns information about a source file.
  rpc GetFileData(GetFileDataRequest) returns (FileData) {}

  // Parses a kythe ticket uri
  rpc ParsePath(ParsePathRequest) returns (WorkspacePath) {}
}
