module(
    bazel_compatibility = [">=7.0.0"],
    repo_name = "intellij_with_bazel",
)

bazel_dep(
    name = "platforms",
    version = "1.0.0",
)
bazel_dep(
    name = "rules_java",
    version = "8.15.1",
)
bazel_dep(
    name = "rules_python",
    version = "1.5.3",
)

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.12",
)
use_repo(python, "python_3_12", "python_versions")

bazel_dep(
    name = "rules_proto",
    version = "7.1.0",
)
bazel_dep(
    name = "protobuf",
    version = "29.5",
)
bazel_dep(
    name = "bazel_skylib",
    version = "1.8.1",
)
bazel_dep(
    name = "rules_pkg",
    version = "1.1.0",
)

# custom configuration for rules kotlin, patches are required
bazel_dep(
    name = "rules_kotlin",
    version = "2.1.8",
)
single_version_override(
    module_name = "rules_kotlin",
    patch_strip = 1,
    patches = [
        "//third_party/kotlin/patches:strip_stdlib.patch",
    ],
)

register_toolchains("//third_party/kotlin:toolchain")

bazel_dep(
    name = "rules_shell",
    version = "0.5.1",
    dev_dependency = True,
)
bazel_dep(
    name = "rules_cc",
    version = "0.2.0",
    dev_dependency = True,
)
bazel_dep(
    name = "rules_bazel_integration_test",
    version = "0.33.2",
    dev_dependency = True,
)

bazel_binaries = use_extension(
    "@rules_bazel_integration_test//:extensions.bzl",
    "bazel_binaries",
    dev_dependency = True,
)
bazel_binaries.download(version = "6.5.0")
bazel_binaries.download(version = "7.5.0")
bazel_binaries.download(
    current = True,
    version = "8.3.1",
)
bazel_binaries.download(version = "last_green")
use_repo(
    bazel_binaries,
    "bazel_binaries",
    "bazel_binaries_bazelisk",
    "build_bazel_bazel_6_5_0",
    "build_bazel_bazel_7_5_0",
    "build_bazel_bazel_8_3_1",
    "build_bazel_bazel_last_green",
)

bazel_dep(name = "rules_jvm_external", version = "6.8")

bazel_dep(name = "rules_scala", version = "7.0.0")

scala_dev_deps = use_extension(
    "@rules_scala//scala/extensions:deps.bzl",
    "scala_deps",
)
scala_dev_deps.scala()
scala_dev_deps.scalatest()

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    name = "maven",
    artifacts = [
        "junit:junit:4.13.2",
        "org.opentest4j:opentest4j:1.3.0",
        "org.mockito:mockito-core:5.8.0",
        "org.objenesis:objenesis:3.3",
        "net.bytebuddy:byte-buddy:1.14.0",
        "net.bytebuddy:byte-buddy-agent:1.14.10",
        "com.google.flogger:flogger:0.8",
        "com.google.flogger:flogger-system-backend:0.8",
        "com.googlecode.java-diff-utils:diffutils:1.3.0",
        # Usually, we'd get this from the JetBrains SDK, but the bundled one not aware of Bazel platforms,
        # so it fails on certain setups.
        "net.java.dev.jna:jna:5.14.0",
        "com.google.auto.value:auto-value-annotations:1.10.2",
        "com.google.auto.value:auto-value:1.10.4",
        "com.google.code.findbugs:jsr305:3.0.2",
        "com.google.code.gson:gson:2.10.1",
        "com.google.errorprone:error_prone_annotations:2.20.0",
        "com.google.guava:guava:33.3.1-jre",  # changed to jre
        "com.google.truth:truth:1.4.4",
        "com.google.j2objc:j2objc-annotations:2.8",
        "com.google.guava:failureaccess:1.0.2",
        "org.hamcrest:hamcrest-core:3.0",
        "org.jetbrains:annotations:26.0.2",
        "org.jetbrains.pty4j:pty4j:0.13.0",
        # Only required for the maintenance script, otherwise use the stdlib for the sdk
        "org.jetbrains.kotlin:kotlin-stdlib:2.1.21",
    ],
    fail_if_repin_required = True,
    generate_compat_repositories = True,
    lock_file = "//:maven_install.json",
)
use_repo(
    maven,
    "com_google_guava_failureaccess",
    "com_google_guava_guava",
    "com_google_j2objc_j2objc_annotations",
    "maven",
    "org_opentest4j_opentest4j",
    "unpinned_maven",
    auto_value = "com_google_auto_value_auto_value",
    auto_value_annotations = "com_google_auto_value_auto_value_annotations",
    bytebuddy = "net_bytebuddy_byte_buddy",
    bytebuddy_agent = "net_bytebuddy_byte_buddy_agent",  # Can it be `bytebuddy-agent`? (not a legal identifier)
    diffutils = "com_googlecode_java_diff_utils_diffutils",
    error_prone_annotations = "com_google_errorprone_error_prone_annotations",
    flogger = "com_google_flogger_flogger",
    flogger_system_backend = "com_google_flogger_flogger_system_backend",
    gson = "com_google_code_gson_gson",
    hamcrest = "org_hamcrest_hamcrest_core",
    jetbrains_annotations = "org_jetbrains_annotations",
    jna = "net_java_dev_jna_jna",
    jsr305_annotations = "com_google_code_findbugs_jsr305",
    junit = "junit_junit",
    mockito = "org_mockito_mockito_core",
    objenesis = "org_objenesis_objenesis",
    ptylib = "org_jetbrains_pty4j_pty4j",
    truth = "com_google_truth_truth",
)

bazel_dep(name = "rules_go", version = "0.56.1", repo_name = "io_bazel_rules_go")
bazel_dep(name = "gazelle", version = "0.45.0", repo_name = "bazel_gazelle")

go_repository = use_repo_rule("@bazel_gazelle//:deps.bzl", "go_repository")

# gRPC is used to generate Go from proto in the aspect tests, in
# //aspect/testing/tests/src/com/google/idea/blaze/aspect/go/...
go_repository(
    name = "org_golang_google_grpc",
    build_file_proto_mode = "disable",
    importpath = "google.golang.org/grpc",
    sum = "h1:zvIju4sqAGvwKspUQOhwnpcqSbzi7/H6QomNNjTL4sk=",
    version = "v1.27.1",
)

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Long-lived download links available at: https://www.jetbrains.com/intellij-repository/releases

# The plugin api for intellij_ce_2025_1. This is required to build IJwB and run integration tests.
IC_251_SHA = "ac530ab969378d739b080989bb726bf24d9971f8942922ab13ddb3bc94f13f3d"

IC_251_URL = "https://www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/idea/ideaIC/2025.1.1/ideaIC-2025.1.1.zip"

http_archive(
    name = "intellij_ce_2025_1",
    build_file = "@//intellij_platform_sdk:BUILD.idea251",
    sha256 = IC_251_SHA,
    url = IC_251_URL,
)

# The plugin api for intellij_ce_2025_2. This is required to build IJwB and run integration tests.
IC_252_SHA = "021015293706ebe45624215fcad59269a0852e6251d00c277396cf64b2b3c108"

IC_252_URL = "https://www.jetbrains.com/intellij-repository/snapshots/com/jetbrains/intellij/idea/ideaIC/252.23892.248-EAP-SNAPSHOT/ideaIC-252.23892.248-EAP-SNAPSHOT.zip"

http_archive(
    name = "intellij_ce_2025_2",
    build_file = "@//intellij_platform_sdk:BUILD.idea252",
    sha256 = IC_252_SHA,
    url = IC_252_URL,
)

# The plugin api for intellij_ce_2025_1. This is required to build IJwB and run integration tests.
IU_251_SHA = "6437eb50dcaebecc34c454370c693184f39fbded99ba9a7059f5189badfe4a7b"

IU_251_URL = "https://www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/idea/ideaIU/2025.1.1/ideaIU-2025.1.1.zip"

http_archive(
    name = "intellij_ue_2025_1",
    build_file = "@//intellij_platform_sdk:BUILD.ue251",
    sha256 = IU_251_SHA,
    url = IU_251_URL,
)

# The plugin api for intellij_ce_2025_2. This is required to build IJwB and run integration tests.
IU_252_SHA = "25e5cd4246afab86913b4c3377cf62ffdd85a8484df1e04c47faf57baf97dc03"

IU_252_URL = "https://www.jetbrains.com/intellij-repository/snapshots/com/jetbrains/intellij/idea/ideaIU/252.23892.248-EAP-SNAPSHOT/ideaIU-252.23892.248-EAP-SNAPSHOT.zip"

http_archive(
    name = "intellij_ue_2025_2",
    build_file = "@//intellij_platform_sdk:BUILD.ue252",
    sha256 = IU_252_SHA,
    url = IU_252_URL,
)

CLION_251_SHA = "5e441b2ddb22811f2f2d3a2db4c177398b6c70bd149c66c4f3fd1915ff8d3c71"

CLION_251_URL = "https://www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/clion/clion/2025.1.1/clion-2025.1.1.zip"

http_archive(
    name = "clion_2025_1",
    build_file = "@//intellij_platform_sdk:BUILD.clion251",
    sha256 = CLION_251_SHA,
    url = CLION_251_URL,
)

CLION_252_SHA = "bca48ff2184f8b93801241a761c273b7016e5f9c3ea5cee44fbcc4c7f559e08b"

CLION_252_URL = "https://www.jetbrains.com/intellij-repository/snapshots/com/jetbrains/intellij/clion/clion/252.23892.173-EAP-SNAPSHOT/clion-252.23892.173-EAP-SNAPSHOT.zip"

http_archive(
    name = "clion_2025_2",
    build_file = "@//intellij_platform_sdk:BUILD.clion252",
    sha256 = CLION_252_SHA,
    url = CLION_252_URL,
)

DEVKIT_BUILD_FILE = """
java_import(
    name = "devkit",
    jars = glob(["devkit/lib/devkit.jar", "devkit/lib/modules/*.jar"]),
    visibility = ["//visibility:public"],
)
"""

DEVKIT_251_SHA = "53f0a27963f37c80a12d142cfa5fa019e268585fa13f17f09683be747a5fb8c7"

DEVKIT_251_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/DevKit/251.25410.59/DevKit-251.25410.59.zip"

http_archive(
    name = "devkit_2025_1",
    build_file_content = DEVKIT_BUILD_FILE,
    sha256 = DEVKIT_251_SHA,
    url = DEVKIT_251_URL,
)

DEVKIT_252_SHA = "e237df12b6d2522364c0109519ef6c1cf64df349642eb383f1144a4871f43172"

DEVKIT_252_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/DevKit/252.23892.248/DevKit-252.23892.248.zip"

http_archive(
    name = "devkit_2025_2",
    build_file_content = DEVKIT_BUILD_FILE,
    sha256 = DEVKIT_252_SHA,
    url = DEVKIT_252_URL,
)

_PYTHON_CE_BUILD_FILE = """
java_import(
    name = "python",
    jars = glob(["python-ce/lib/*.jar", "python-ce/lib/modules/*.jar"]),
    visibility = ["//visibility:public"],
)
filegroup(
  name = "python_helpers",
  srcs = glob(["python-ce/helpers/**/*"]),
  visibility = ["//visibility:public"],
)
"""

PYTHON_PLUGIN_251_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/PythonCore/251.25410.109/PythonCore-251.25410.109.zip"

PYTHON_PLUGIN_251_SHA = "ce124234cd71fd05162c0c2fb872822b5fdf16656dda58783f7457472e60fd5e"

http_archive(
    name = "python_2025_1",
    build_file_content = _PYTHON_CE_BUILD_FILE,
    sha256 = PYTHON_PLUGIN_251_SHA,
    url = PYTHON_PLUGIN_251_URL,
)

PYTHON_PLUGIN_252_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/PythonCore/252.23892.248/PythonCore-252.23892.248.zip"

PYTHON_PLUGIN_252_SHA = "b5d402d7d73c004a7fa3811caf373c9e24cecf328cfb934718fbe0bac61fa06c"

http_archive(
    name = "python_2025_2",
    build_file_content = _PYTHON_CE_BUILD_FILE,
    sha256 = PYTHON_PLUGIN_252_SHA,
    url = PYTHON_PLUGIN_252_URL,
)

_GO_BUILD_FILE = """
java_import(
    name = "go",
    jars = glob(["go-plugin/lib/*.jar", "go-plugin/lib/modules/*.jar"]),
    visibility = ["//visibility:public"],
)
"""

GO_PLUGIN_251_SHA = "aa1657029527713c1e3a612e1f83ca60e128c553ef1e07ab1440256d4c2d53dc"

GO_PLUGIN_251_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/org.jetbrains.plugins.go/251.25410.59/org.jetbrains.plugins.go-251.25410.59.zip"

http_archive(
    name = "go_2025_1",
    build_file_content = _GO_BUILD_FILE,
    sha256 = GO_PLUGIN_251_SHA,
    url = GO_PLUGIN_251_URL,
)

GO_PLUGIN_252_SHA = "4f805bbe5bf8f8379a95958d441c62ff102173759f900546e9a1586b85d081a8"

GO_PLUGIN_252_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/org.jetbrains.plugins.go/252.23892.248/org.jetbrains.plugins.go-252.23892.248.zip"

http_archive(
    name = "go_2025_2",
    build_file_content = _GO_BUILD_FILE,
    sha256 = GO_PLUGIN_252_SHA,
    url = GO_PLUGIN_252_URL,
)

_SCALA_BUILD_FILE = """
java_import(
    name = "scala",
    jars = glob(["Scala/lib/*.jar", "Scala/lib/modules/*.jar"]),
    visibility = ["//visibility:public"],
)
"""

SCALA_PLUGIN_251_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/org.intellij.scala/2025.1.23/org.intellij.scala-2025.1.23.zip"

SCALA_PLUGIN_251_SHA = "a2eab9536ef9495e0be806d0013ba5d2239c57ca457d7b9afccf09240896b8e9"

http_archive(
    name = "scala_2025_1",
    build_file_content = _SCALA_BUILD_FILE,
    sha256 = SCALA_PLUGIN_251_SHA,
    url = SCALA_PLUGIN_251_URL,
)

SCALA_PLUGIN_252_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/org.intellij.scala/2025.2.19/org.intellij.scala-2025.2.19.zip"

SCALA_PLUGIN_252_SHA = "486efcbd5e35f369fdb187cb432a0bfdf5abcf25e040dc67f9dd3975636caf85"

http_archive(
    name = "scala_2025_2",
    build_file_content = _SCALA_BUILD_FILE,
    sha256 = SCALA_PLUGIN_252_SHA,
    url = SCALA_PLUGIN_252_URL,
)

_TOML_BUILD_FILE = """
java_import(
    name = "toml",
    jars = glob(["toml/lib/toml.jar", "toml/lib/modules/*.jar"]),
    visibility = ["//visibility:public"],
)
"""

TOML_PLUGIN_251_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/org.toml.lang/251.25410.123/org.toml.lang-251.25410.123.zip"

TOML_PLUGIN_251_SHA = "177c42c536b3fdc764400d49991162652b7c0f52b1dcdebbeaee8225df953089"

http_archive(
    name = "toml_2025_1",
    build_file_content = _TOML_BUILD_FILE,
    sha256 = TOML_PLUGIN_251_SHA,
    url = TOML_PLUGIN_251_URL,
)

TOML_PLUGIN_252_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/org.toml.lang/252.23892.253/org.toml.lang-252.23892.253.zip"

TOML_PLUGIN_252_SHA = "d927b6b8dd6ce2239c71d5001303eb6dd9d05e581cd2f09cb75416cb60334ce8"

http_archive(
    name = "toml_2025_2",
    build_file_content = _TOML_BUILD_FILE,
    sha256 = TOML_PLUGIN_252_SHA,
    url = TOML_PLUGIN_252_URL,
)

# needed for cpp tests
http_archive(
    name = "com_google_absl",
    sha256 = "f50e5ac311a81382da7fa75b97310e4b9006474f9560ac46f54a9967f07d4ae3",
    strip_prefix = "abseil-cpp-20240722.0",
    urls = [
        "https://github.com/abseil/abseil-cpp/archive/refs/tags/20240722.0.tar.gz",
    ],
)
