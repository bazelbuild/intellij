module(
    bazel_compatibility = [">=7.0.0"],
    repo_name = "intellij_with_bazel",
)

register_toolchains("//third_party/kotlin:toolchain")

bazel_dep(
    name = "platforms",
    version = "0.0.11",
)
bazel_dep(
    name = "rules_java",
    version = "8.9.0",
)
bazel_dep(
    name = "rules_python",
    version = "1.4.1",
)

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.12",
)
use_repo(python, "python_3_12", "python_versions")

bazel_dep(
    name = "rules_proto",
    version = "7.1.0",
)
bazel_dep(
    name = "protobuf",
    version = "29.4",
)
bazel_dep(
    name = "bazel_skylib",
    version = "1.7.1",
)
bazel_dep(
    name = "rules_pkg",
    version = "1.1.0",
)
bazel_dep(
    name = "rules_kotlin",
    version = "2.0.0",
)

bazel_dep(
    name = "rules_shell",
    version = "0.4.0",
    dev_dependency = True,
)
bazel_dep(
    name = "rules_cc",
    version = "0.1.1",
    dev_dependency = True,
)
bazel_dep(
    name = "rules_bazel_integration_test",
    version = "0.32.1",
    dev_dependency = True,
)

bazel_binaries = use_extension(
    "@rules_bazel_integration_test//:extensions.bzl",
    "bazel_binaries",
    dev_dependency = True,
)
bazel_binaries.download(version = "6.5.0")
bazel_binaries.download(version = "7.5.0")
bazel_binaries.download(
    current = True,
    version = "8.2.1",
)
bazel_binaries.download(version = "last_green")
use_repo(
    bazel_binaries,
    "bazel_binaries",
    "bazel_binaries_bazelisk",
    "build_bazel_bazel_6_5_0",
    "build_bazel_bazel_7_5_0",
    "build_bazel_bazel_8_2_1",
    "build_bazel_bazel_last_green",
)

bazel_dep(name = "rules_jvm_external", version = "6.7")

# bzlmod-compatible version of rules_scala, required for Bazel 9+ compatibility
git_override(
    module_name = "rules_scala",
    #branch = "bzlmod-bazel-8",
    commit = "21e4be9557645885ba2aabab7922c457ffdf03ee",
    remote = "https://github.com/mbland/rules_scala.git",
)

bazel_dep(name = "rules_scala", repo_name = "io_bazel_rules_scala")

scala_dev_deps = use_extension(
    "@io_bazel_rules_scala//scala/extensions:deps.bzl",
    "scala_deps",
)
scala_dev_deps.toolchains(
    scalatest = True,
)

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    name = "maven",
    artifacts = [
        "junit:junit:4.13.2",
        "org.opentest4j:opentest4j:1.3.0",
        "org.mockito:mockito-core:5.8.0",
        "org.objenesis:objenesis:3.3",
        "net.bytebuddy:byte-buddy:1.14.0",
        "net.bytebuddy:byte-buddy-agent:1.14.10",
        "com.google.flogger:flogger:0.8",
        "com.google.flogger:flogger-system-backend:0.8",
        "com.googlecode.java-diff-utils:diffutils:1.3.0",
        # Usually, we'd get this from the JetBrains SDK, but the bundled one not aware of Bazel platforms,
        # so it fails on certain setups.
        "net.java.dev.jna:jna:5.14.0",
        "com.google.auto.value:auto-value-annotations:1.10.2",
        "com.google.auto.value:auto-value:1.10.4",
        "com.google.code.findbugs:jsr305:3.0.2",
        "com.google.code.gson:gson:2.10.1",
        "com.google.errorprone:error_prone_annotations:2.20.0",
        "com.google.guava:guava:33.3.1-jre",  # changed to jre
        "com.google.truth:truth:1.4.4",
        "com.google.truth.extensions:truth-java8-extension:1.4.4",
        "com.google.j2objc:j2objc-annotations:2.8",
        "com.google.guava:failureaccess:1.0.2",
        "org.hamcrest:hamcrest-core:3.0",
        "org.jetbrains:annotations:26.0.2",
    ],
    fail_if_repin_required = True,
    generate_compat_repositories = True,
    lock_file = "//:maven_install.json",
)
use_repo(
    maven,
    "com_google_guava_failureaccess",
    "com_google_guava_guava",
    "com_google_j2objc_j2objc_annotations",
    "maven",
    "org_opentest4j_opentest4j",
    "unpinned_maven",
    auto_value = "com_google_auto_value_auto_value",
    auto_value_annotations = "com_google_auto_value_auto_value_annotations",
    bytebuddy = "net_bytebuddy_byte_buddy",
    bytebuddy_agent = "net_bytebuddy_byte_buddy_agent",  # Can it be `bytebuddy-agent`? (not a legal identifier)
    diffutils = "com_googlecode_java_diff_utils_diffutils",
    error_prone_annotations = "com_google_errorprone_error_prone_annotations",
    flogger = "com_google_flogger_flogger",
    flogger_system_backend = "com_google_flogger_flogger_system_backend",
    gson = "com_google_code_gson_gson",
    hamcrest = "org_hamcrest_hamcrest_core",
    jetbrains_annotations = "org_jetbrains_annotations",
    jna = "net_java_dev_jna_jna",
    jsr305_annotations = "com_google_code_findbugs_jsr305",
    junit = "junit_junit",
    mockito = "org_mockito_mockito_core",
    objenesis = "org_objenesis_objenesis",
    truth = "com_google_truth_truth",
    truth8 = "com_google_truth_extensions_truth_java8_extension",
)

bazel_dep(name = "rules_go", version = "0.54.1", repo_name = "io_bazel_rules_go")
bazel_dep(name = "gazelle", version = "0.43.0", repo_name = "bazel_gazelle")

go_repository = use_repo_rule("@bazel_gazelle//:deps.bzl", "go_repository")

# gRPC is used to generate Go from proto in the aspect tests, in
# //aspect/testing/tests/src/com/google/idea/blaze/aspect/go/...
go_repository(
    name = "org_golang_google_grpc",
    build_file_proto_mode = "disable",
    importpath = "google.golang.org/grpc",
    sum = "h1:zvIju4sqAGvwKspUQOhwnpcqSbzi7/H6QomNNjTL4sk=",
    version = "v1.27.1",
)

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Long-lived download links available at: https://www.jetbrains.com/intellij-repository/releases

# The plugin api for intellij_ce_2022_3. This is required to build IJwB and run integration tests.
http_archive(
    name = "intellij_ce_2022_3",
    build_file = "@//intellij_platform_sdk:BUILD.idea223",
    sha256 = "f6ea9aee6dec73b55ea405b37402394095be3c658d1c2707a8f30ac848974eac",
    url = "https://www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/idea/ideaIC/2022.3/ideaIC-2022.3.zip",
)

# The plugin api for intellij_ce_2024_2. This is required to build IJwB and run integration tests.
IC_242_SHA = "67dc633ff20fadd702eae6d5b8e875c510791445a96e5f5a41ef902ab570966a"

IC_242_URL = "https://www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/idea/ideaIC/2024.2.5/ideaIC-2024.2.5.zip"

http_archive(
    name = "intellij_ce_2024_2",
    build_file = "@//intellij_platform_sdk:BUILD.idea242",
    sha256 = IC_242_SHA,
    url = IC_242_URL,
)

# The plugin api for intellij_ce_2024_2. This is required to build IJwB and run integration tests.
IC_243_SHA = "82eefae597091ec2fc8f908b42b38cbb8c7ebb13c1694983fd16740d33630fc9"

IC_243_URL = "https://www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/idea/ideaIC/2024.3.5/ideaIC-2024.3.5.zip"

http_archive(
    name = "intellij_ce_2024_3",
    build_file = "@//intellij_platform_sdk:BUILD.idea243",
    sha256 = IC_243_SHA,
    url = IC_243_URL,
)

# The plugin api for intellij_ce_2025_1. This is required to build IJwB and run integration tests.
IC_251_SHA = "ac530ab969378d739b080989bb726bf24d9971f8942922ab13ddb3bc94f13f3d"

IC_251_URL = "https://www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/idea/ideaIC/2025.1.1/ideaIC-2025.1.1.zip"

http_archive(
    name = "intellij_ce_2025_1",
    build_file = "@//intellij_platform_sdk:BUILD.idea251",
    sha256 = IC_251_SHA,
    url = IC_251_URL,
)

IU_242_SHA = "6374538aeb34376c7501819b19804a30ee4a49547b5bfe3aa4aa80735191324e"

IU_242_URL = "https://www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/idea/ideaIU/2024.2.5/ideaIU-2024.2.5.zip"

http_archive(
    name = "intellij_ue_2024_2",
    build_file = "@//intellij_platform_sdk:BUILD.ue242",
    sha256 = IU_242_SHA,
    url = IU_242_URL,
)

IU_243_SHA = "e4322c153b763805fcb1b3f3634c9f89d9cd3cc22638771d1407ba691f4c2d90"

IU_243_URL = "https://www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/idea/ideaIU/2024.3.5/ideaIU-2024.3.5.zip"

http_archive(
    name = "intellij_ue_2024_3",
    build_file = "@//intellij_platform_sdk:BUILD.ue243",
    sha256 = IU_243_SHA,
    url = IU_243_URL,
)

# The plugin api for intellij_ce_2025_1. This is required to build IJwB and run integration tests.
IU_251_SHA = "6437eb50dcaebecc34c454370c693184f39fbded99ba9a7059f5189badfe4a7b"

IU_251_URL = "https://www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/idea/ideaIU/2025.1.1/ideaIU-2025.1.1.zip"

http_archive(
    name = "intellij_ue_2025_1",
    build_file = "@//intellij_platform_sdk:BUILD.ue251",
    sha256 = IU_251_SHA,
    url = IU_251_URL,
)

CLION_242_SHA = "27029107088193b6ba0d3d888ce67fcdd1aae68f324c4c6ddadfdd4c3c90b87e"

CLION_242_URL = "https://www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/clion/clion/2024.2.4/clion-2024.2.4.zip"

http_archive(
    name = "clion_2024_2",
    build_file = "@//intellij_platform_sdk:BUILD.clion242",
    sha256 = CLION_242_SHA,
    url = CLION_242_URL,
)

CLION_243_SHA = "8fb7993c17f0a32e01de2b82552c45fa57c912b1aee7a330e379eee6585e2e61"

CLION_243_URL = "https://www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/clion/clion/2024.3.5/clion-2024.3.5.zip"

http_archive(
    name = "clion_2024_3",
    build_file = "@//intellij_platform_sdk:BUILD.clion243",
    sha256 = CLION_243_SHA,
    url = CLION_243_URL,
)

CLION_251_SHA = "5e441b2ddb22811f2f2d3a2db4c177398b6c70bd149c66c4f3fd1915ff8d3c71"

CLION_251_URL = "https://www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/clion/clion/2025.1.1/clion-2025.1.1.zip"

http_archive(
    name = "clion_2025_1",
    build_file = "@//intellij_platform_sdk:BUILD.clion251",
    sha256 = CLION_251_SHA,
    url = CLION_251_URL,
)

DEVKIT_BUILD_FILE = """
java_import(
    name = "devkit",
    jars = ["devkit/lib/devkit.jar"],
    visibility = ["//visibility:public"],
)
"""

DEVKIT_242_SHA = "628545e45a8b450527224105910deef6b2af568b084d2b3afbd1e8b75e561a70"

DEVKIT_242_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/DevKit/242.23726.103/DevKit-242.23726.103.zip"

http_archive(
    name = "devkit_2024_2",
    build_file_content = DEVKIT_BUILD_FILE,
    sha256 = DEVKIT_242_SHA,
    url = DEVKIT_242_URL,
)

DEVKIT_243_SHA = "db8dbaa70d5e32c938a30f95d686d0acfd578d8db12bf75052194622bcbb972f"

DEVKIT_243_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/DevKit/243.26053.27/DevKit-243.26053.27.zip"

http_archive(
    name = "devkit_2024_3",
    build_file_content = DEVKIT_BUILD_FILE,
    sha256 = DEVKIT_243_SHA,
    url = DEVKIT_243_URL,
)

DEVKIT_251_SHA = "53f0a27963f37c80a12d142cfa5fa019e268585fa13f17f09683be747a5fb8c7"

DEVKIT_251_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/DevKit/251.25410.59/DevKit-251.25410.59.zip"

http_archive(
    name = "devkit_2025_1",
    build_file_content = DEVKIT_BUILD_FILE,
    sha256 = DEVKIT_251_SHA,
    url = DEVKIT_251_URL,
)

_PYTHON_CE_BUILD_FILE = """
java_import(
    name = "python",
    jars = glob(["python-ce/lib/*.jar", "python-ce/lib/modules/*.jar"]),
    visibility = ["//visibility:public"],
)
filegroup(
  name = "python_helpers",
  srcs = glob(["python-ce/helpers/**/*"]),
  visibility = ["//visibility:public"],
)
"""

PYTHON_PLUGIN_242_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/PythonCore/242.24807.4/PythonCore-242.24807.4.zip"

PYTHON_PLUGIN_242_SHA = "ac5ea796655322d5cc0a1579fbcc97ae57e558dde0a4bd6b78a20d10dcd374cf"

http_archive(
    name = "python_2024_2",
    build_file_content = _PYTHON_CE_BUILD_FILE,
    sha256 = PYTHON_PLUGIN_242_SHA,
    url = PYTHON_PLUGIN_242_URL,
)

PYTHON_PLUGIN_243_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/PythonCore/243.24978.46/PythonCore-243.24978.46.zip"

PYTHON_PLUGIN_243_SHA = "59f015e04db8b3678d650b123d14696efaa3c6cca47a5d345efdfa3c18f73f65"

http_archive(
    name = "python_2024_3",
    build_file_content = _PYTHON_CE_BUILD_FILE,
    sha256 = PYTHON_PLUGIN_243_SHA,
    url = PYTHON_PLUGIN_243_URL,
)

PYTHON_PLUGIN_251_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/PythonCore/251.25410.109/PythonCore-251.25410.109.zip"

PYTHON_PLUGIN_251_SHA = "ce124234cd71fd05162c0c2fb872822b5fdf16656dda58783f7457472e60fd5e"

http_archive(
    name = "python_2025_1",
    build_file_content = _PYTHON_CE_BUILD_FILE,
    sha256 = PYTHON_PLUGIN_251_SHA,
    url = PYTHON_PLUGIN_251_URL,
)

_GO_BUILD_FILE = """
java_import(
    name = "go",
    jars = glob(["go-plugin/lib/*.jar", "go-plugin/lib/modules/*.jar"]),
    visibility = ["//visibility:public"],
)
"""

GO_PLUGIN_242_SHA = "b65091c9189576b549698675c4e29f9a006660b9830c0d66c5169ee53a5e610d"

GO_PLUGIN_242_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/org.jetbrains.plugins.go/242.23726.16/org.jetbrains.plugins.go-242.23726.16.zip"

http_archive(
    name = "go_2024_2",
    build_file_content = _GO_BUILD_FILE,
    sha256 = GO_PLUGIN_242_SHA,
    url = GO_PLUGIN_242_URL,
)

GO_PLUGIN_243_SHA = "93e5428b70f06c03d33d060a6d9b014002078153a90f4f02209a54e39e0faa2e"

GO_PLUGIN_243_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/org.jetbrains.plugins.go/243.26053.27/org.jetbrains.plugins.go-243.26053.27.zip"

http_archive(
    name = "go_2024_3",
    build_file_content = _GO_BUILD_FILE,
    sha256 = GO_PLUGIN_243_SHA,
    url = GO_PLUGIN_243_URL,
)

GO_PLUGIN_251_SHA = "aa1657029527713c1e3a612e1f83ca60e128c553ef1e07ab1440256d4c2d53dc"

GO_PLUGIN_251_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/org.jetbrains.plugins.go/251.25410.59/org.jetbrains.plugins.go-251.25410.59.zip"

http_archive(
    name = "go_2025_1",
    build_file_content = _GO_BUILD_FILE,
    sha256 = GO_PLUGIN_251_SHA,
    url = GO_PLUGIN_251_URL,
)

_SCALA_BUILD_FILE = """
java_import(
    name = "scala",
    jars = glob(["Scala/lib/*.jar", "Scala/lib/modules/*.jar"]),
    visibility = ["//visibility:public"],
)
"""

SCALA_PLUGIN_242_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/org.intellij.scala/2024.2.30/org.intellij.scala-2024.2.30.zip"

SCALA_PLUGIN_242_SHA = "2b3ebb4377a59ef465a1b352d857d2feb4e407dd9fcae405ad0edfef833ae783"

http_archive(
    name = "scala_2024_2",
    build_file_content = _SCALA_BUILD_FILE,
    sha256 = SCALA_PLUGIN_242_SHA,
    url = SCALA_PLUGIN_242_URL,
)

SCALA_PLUGIN_243_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/org.intellij.scala/2024.3.42/org.intellij.scala-2024.3.42.zip"

SCALA_PLUGIN_243_SHA = "e99b73c487056aa1265833ab872cf6fbd58f4fee4b2cd10ec70fa7129fa0d132"

http_archive(
    name = "scala_2024_3",
    build_file_content = _SCALA_BUILD_FILE,
    sha256 = SCALA_PLUGIN_243_SHA,
    url = SCALA_PLUGIN_243_URL,
)

SCALA_PLUGIN_251_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/org.intellij.scala/2025.1.23/org.intellij.scala-2025.1.23.zip"

SCALA_PLUGIN_251_SHA = "a2eab9536ef9495e0be806d0013ba5d2239c57ca457d7b9afccf09240896b8e9"

http_archive(
    name = "scala_2025_1",
    build_file_content = _SCALA_BUILD_FILE,
    sha256 = SCALA_PLUGIN_251_SHA,
    url = SCALA_PLUGIN_251_URL,
)

_TOML_BUILD_FILE = """
java_import(
    name = "toml",
    jars = ["toml/lib/toml.jar"],
    visibility = ["//visibility:public"],
)
"""

TOML_PLUGIN_242_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/org.toml.lang/242.20224.155/org.toml.lang-242.20224.155.zip"

TOML_PLUGIN_242_SHA = "96bd1964b5b4bc7f778c87dddee11b8f7e3d08559a2a72e52909ce4d31be2d9c"

# TOML required by Python since 242.13688.18
http_archive(
    name = "toml_2024_2",
    build_file_content = _TOML_BUILD_FILE,
    sha256 = TOML_PLUGIN_242_SHA,
    url = TOML_PLUGIN_242_URL,
)

TOML_PLUGIN_243_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/org.toml.lang/243.23654.183/org.toml.lang-243.23654.183.zip"

TOML_PLUGIN_243_SHA = "7a400f82d8e62415bfda523c9b719b3510b59eabd1aa8a643e95511e84fc009d"

http_archive(
    name = "toml_2024_3",
    build_file_content = _TOML_BUILD_FILE,
    sha256 = TOML_PLUGIN_243_SHA,
    url = TOML_PLUGIN_243_URL,
)

TOML_PLUGIN_251_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/org.toml.lang/251.25410.123/org.toml.lang-251.25410.123.zip"

TOML_PLUGIN_251_SHA = "177c42c536b3fdc764400d49991162652b7c0f52b1dcdebbeaee8225df953089"

http_archive(
    name = "toml_2025_1",
    build_file_content = _TOML_BUILD_FILE,
    sha256 = TOML_PLUGIN_251_SHA,
    url = TOML_PLUGIN_251_URL,
)

# needed for cpp tests
http_archive(
    name = "com_google_absl",
    sha256 = "f50e5ac311a81382da7fa75b97310e4b9006474f9560ac46f54a9967f07d4ae3",
    strip_prefix = "abseil-cpp-20240722.0",
    urls = [
        "https://github.com/abseil/abseil-cpp/archive/refs/tags/20240722.0.tar.gz",
    ],
)

_JARJAR_BUILD_FILE = """
load("@bazel_skylib//rules:copy_file.bzl", "copy_file")

java_binary(
    name = "jarjar_bin",
    srcs = glob(
        ["src/main/**/*.java"],
        exclude = [
            "src/main/com/tonicsystems/jarjar/JarJarMojo.java",
            "src/main/com/tonicsystems/jarjar/util/AntJarProcessor.java",
            "src/main/com/tonicsystems/jarjar/JarJarTask.java",
        ],
    ),
    main_class = "com.tonicsystems.jarjar.Main",
    resources = [":help"],
    use_launcher = False,
    visibility = ["//visibility:public"],
    deps = [":asm"],
)

java_import(
    name = "asm",
    jars = glob(["lib/asm-*.jar"]),
)

copy_file(
    name = "help",
    src = "src/main/com/tonicsystems/jarjar/help.txt",
    out = "com/tonicsystems/jarjar/help.txt",
)
"""

new_git_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:git.bzl", "new_git_repository")

new_git_repository(
    name = "jarjar",
    build_file_content = _JARJAR_BUILD_FILE,
    commit = "38ff702d10baec78f30d5f57485ae452f0fe33b5",
    remote = "https://github.com/google/jarjar",
    shallow_since = "1518210648 -0800",
)
