module(
    bazel_compatibility = [">=7.0.0"],
    repo_name = "intellij_with_bazel",
)

bazel_dep(
    name = "platforms",
    version = "1.0.0",
)
bazel_dep(
    name = "rules_java",
    version = "8.15.2",
)
bazel_dep(
    name = "rules_python",
    version = "1.6.1",
)

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.12",
)
use_repo(python, "python_3_12", "python_versions")

bazel_dep(
    name = "rules_proto",
    version = "7.1.0",
)
bazel_dep(
    name = "protobuf",
    version = "32.1",
)
bazel_dep(
    name = "bazel_skylib",
    version = "1.8.1",
)
bazel_dep(
    name = "rules_pkg",
    version = "1.1.0",
)

# custom configuration for rules kotlin, patches are required
bazel_dep(
    name = "rules_kotlin",
    version = "2.1.9",
)
single_version_override(
    module_name = "rules_kotlin",
    patch_strip = 1,
    patches = [
        "//third_party/kotlin/patches:strip_stdlib.patch",
    ],
)

register_toolchains("//third_party/kotlin:toolchain")

bazel_dep(
    name = "rules_shell",
    version = "0.6.1",
    dev_dependency = True,
)
bazel_dep(
    name = "rules_cc",
    version = "0.2.8",
    dev_dependency = True,
)
bazel_dep(
    name = "rules_bazel_integration_test",
    version = "0.33.2",
    dev_dependency = True,
)

bazel_binaries = use_extension(
    "@rules_bazel_integration_test//:extensions.bzl",
    "bazel_binaries",
    dev_dependency = True,
)
bazel_binaries.download(version = "6.5.0")
bazel_binaries.download(version = "7.5.0")
bazel_binaries.download(
    current = True,
    version = "8.4.0",
)
bazel_binaries.download(version = "last_green")
use_repo(
    bazel_binaries,
    "bazel_binaries",
    "bazel_binaries_bazelisk",
    "build_bazel_bazel_6_5_0",
    "build_bazel_bazel_7_5_0",
    "build_bazel_bazel_8_4_0",
    "build_bazel_bazel_last_green",
)

bazel_dep(name = "rules_jvm_external", version = "6.8")

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    name = "maven",
    artifacts = [
        "junit:junit:4.13.2",
        "org.opentest4j:opentest4j:1.3.0",
        "org.mockito:mockito-core:5.8.0",
        "org.objenesis:objenesis:3.3",
        "net.bytebuddy:byte-buddy:1.14.0",
        "net.bytebuddy:byte-buddy-agent:1.14.10",
        "com.google.flogger:flogger:0.8",
        "com.google.flogger:flogger-system-backend:0.8",
        "com.googlecode.java-diff-utils:diffutils:1.3.0",
        # Usually, we'd get this from the JetBrains SDK, but the bundled one not aware of Bazel platforms,
        # so it fails on certain setups.
        "net.java.dev.jna:jna:5.14.0",
        "com.google.auto.value:auto-value-annotations:1.10.2",
        "com.google.auto.value:auto-value:1.10.4",
        "com.google.code.findbugs:jsr305:3.0.2",
        "com.google.code.gson:gson:2.10.1",
        "com.google.errorprone:error_prone_annotations:2.20.0",
        "com.google.guava:guava:33.3.1-jre",  # changed to jre
        "com.google.truth:truth:1.4.4",
        "com.google.j2objc:j2objc-annotations:2.8",
        "com.google.guava:failureaccess:1.0.2",
        "org.hamcrest:hamcrest-core:3.0",
        "org.jetbrains:annotations:26.0.2",
        "org.jetbrains.pty4j:pty4j:0.13.0",
        # Only required for the maintenance script, otherwise use the stdlib for the sdk
        "org.jetbrains.kotlin:kotlin-stdlib:2.1.21",
    ],
    fail_if_repin_required = True,
    generate_compat_repositories = True,
    lock_file = "//:maven_install.json",
)
use_repo(
    maven,
    "com_google_guava_failureaccess",
    "com_google_guava_guava",
    "com_google_j2objc_j2objc_annotations",
    "maven",
    "org_opentest4j_opentest4j",
    "unpinned_maven",
    auto_value = "com_google_auto_value_auto_value",
    auto_value_annotations = "com_google_auto_value_auto_value_annotations",
    bytebuddy = "net_bytebuddy_byte_buddy",
    bytebuddy_agent = "net_bytebuddy_byte_buddy_agent",  # Can it be `bytebuddy-agent`? (not a legal identifier)
    diffutils = "com_googlecode_java_diff_utils_diffutils",
    error_prone_annotations = "com_google_errorprone_error_prone_annotations",
    flogger = "com_google_flogger_flogger",
    flogger_system_backend = "com_google_flogger_flogger_system_backend",
    gson = "com_google_code_gson_gson",
    hamcrest = "org_hamcrest_hamcrest_core",
    jetbrains_annotations = "org_jetbrains_annotations",
    jna = "net_java_dev_jna_jna",
    jsr305_annotations = "com_google_code_findbugs_jsr305",
    junit = "junit_junit",
    mockito = "org_mockito_mockito_core",
    objenesis = "org_objenesis_objenesis",
    ptylib = "org_jetbrains_pty4j_pty4j",
    truth = "com_google_truth_truth",
)

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Long-lived download links available at: https://www.jetbrains.com/intellij-repository/releases

CLION_251_SHA = "0f3ae5c8536a009e985b3a91485ef0e9856db3ca980d5fb3fb12f2f4ed08d8d1"

CLION_251_URL = "https://www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/clion/clion/2025.1.5.1/clion-2025.1.5.1.zip"

http_archive(
    name = "clion_2025_1",
    build_file = "@//intellij_platform_sdk:BUILD.clion251",
    sha256 = CLION_251_SHA,
    url = CLION_251_URL,
)

CLION_252_SHA = "a33d7cff3297ecc28f83dc161d069ee8c2009ecb7bee42c913f25814810e3785"

CLION_252_URL = "https://www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/clion/clion/2025.2.1/clion-2025.2.1.zip"

http_archive(
    name = "clion_2025_2",
    build_file = "@//intellij_platform_sdk:BUILD.clion252",
    sha256 = CLION_252_SHA,
    url = CLION_252_URL,
)

CLION_253_SHA = "db6985e3cae06c6ba39009dc0afc0a0cfbadc5ca556f11a99d76b1c7bf263034"

CLION_253_URL = "https://www.jetbrains.com/intellij-repository/snapshots/com/jetbrains/intellij/clion/clion/253.22441.25-EAP-SNAPSHOT/clion-253.22441.25-EAP-SNAPSHOT.zip"

http_archive(
    name = "clion_2025_3",
    build_file = "@//intellij_platform_sdk:BUILD.clion253",
    sha256 = CLION_253_SHA,
    url = CLION_253_URL,
)

_PYTHON_CE_BUILD_FILE = """
java_import(
    name = "python",
    jars = glob(["python-ce/lib/*.jar", "python-ce/lib/modules/*.jar"]),
    visibility = ["//visibility:public"],
)
filegroup(
  name = "python_helpers",
  srcs = glob(["python-ce/helpers/**/*"]),
  visibility = ["//visibility:public"],
)
"""

PYTHON_PLUGIN_251_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/PythonCore/251.28293.39/PythonCore-251.28293.39.zip"

PYTHON_PLUGIN_251_SHA = "4a0a3da885df2c7069f56b64ea7ef15d5ec4fb0242eb5e2fcac6082c92972c03"

http_archive(
    name = "python_2025_1",
    build_file_content = _PYTHON_CE_BUILD_FILE,
    sha256 = PYTHON_PLUGIN_251_SHA,
    url = PYTHON_PLUGIN_251_URL,
)

PYTHON_PLUGIN_252_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/PythonCore/252.26199.7/PythonCore-252.26199.7.zip"

PYTHON_PLUGIN_252_SHA = "947613a11270043584b16b06a4e946746dd0bbd289f59765711df6427cad817b"

http_archive(
    name = "python_2025_2",
    build_file_content = _PYTHON_CE_BUILD_FILE,
    sha256 = PYTHON_PLUGIN_252_SHA,
    url = PYTHON_PLUGIN_252_URL,
)

PYTHON_PLUGIN_253_URL = "https://plugins.jetbrains.com/maven/com/jetbrains/plugins/PythonCore/253.22441.33/PythonCore-253.22441.33.zip"

PYTHON_PLUGIN_253_SHA = "d9f744dc392605981fc9d014b388942edaac7dd2788badd8eb76fab8133b7c72"

http_archive(
    name = "python_2025_3",
    build_file_content = _PYTHON_CE_BUILD_FILE,
    sha256 = PYTHON_PLUGIN_253_SHA,
    url = PYTHON_PLUGIN_253_URL,
)

# needed for cpp tests
http_archive(
    name = "com_google_absl",
    sha256 = "f50e5ac311a81382da7fa75b97310e4b9006474f9560ac46f54a9967f07d4ae3",
    strip_prefix = "abseil-cpp-20240722.0",
    urls = [
        "https://github.com/abseil/abseil-cpp/archive/refs/tags/20240722.0.tar.gz",
    ],
)
