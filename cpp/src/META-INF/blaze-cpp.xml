<!--
  ~ Copyright 2021 The Bazel Authors. All rights reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<idea-plugin>
  <depends>com.intellij.modules.cidr.debugger</depends>

  <project-components>
    <component>
      <implementation-class>com.google.idea.blaze.cpp.BlazeCWorkspace</implementation-class>
    </component>
  </project-components>

  <extensionPoints>
    <extensionPoint qualifiedName="com.google.idea.blaze.cpp.BlazeCompilerFlagsProcessorProvider"
                    interface="com.google.idea.blaze.cpp.BlazeCompilerFlagsProcessor$Provider"/>
    <extensionPoint qualifiedName="com.google.idea.blaze.cpp.SourceFileFinder"
                    interface="com.google.idea.blaze.cpp.SourceFileFinder"/>
    <extensionPoint interface="com.google.idea.blaze.cpp.CppSupportChecker"
                    qualifiedName="com.google.idea.blaze.cpp.CppSupportChecker" />
  </extensionPoints>

  <extensions defaultExtensionNs="com.google.idea.blaze">
    <SyncPlugin implementation="com.google.idea.blaze.cpp.BlazeCSyncPlugin"/>
    <PrefetchFileSource implementation="com.google.idea.blaze.cpp.CPrefetchFileSource"/>
    <cpp.BlazeCompilerFlagsProcessorProvider implementation="com.google.idea.blaze.cpp.IncludeRootFlagsProcessor$Provider"/>
    <cpp.BlazeCompilerFlagsProcessorProvider implementation="com.google.idea.blaze.cpp.SysrootFlagsProcessor$Provider"/>
    <TargetKindProvider implementation="com.google.idea.blaze.cpp.CppBlazeRules"/>
  </extensions>

  <extensions defaultExtensionNs="cidr.lang">
    <languageKindHelper implementation="com.google.idea.blaze.cpp.BlazeLanguageKindCalculatorHelper"/>
    <ownModuleDetector implementation="com.google.idea.blaze.cpp.BlazeOwnModuleDetector"/>
  </extensions>
  <extensions defaultExtensionNs="com.intellij">
    <projectService serviceImplementation="com.google.idea.blaze.cpp.BlazeCompilerInfoMapService"/>
    <!-- It may look like we're registering the same service twice, but this is intentional.
     In non-macOS systems, we don't want to return any Xcode compiler settings.
     Therefore, we register a service that returns nothing.
     We override this registration on macOS systems later. -->
    <projectService serviceInterface="com.google.idea.blaze.cpp.XcodeCompilerSettingsProvider"
      serviceImplementation="com.google.idea.blaze.cpp.XcodeCompilerSettingsProviderNoopImpl"
    />
    <projectService serviceInterface="com.google.idea.blaze.cpp.XcodeCompilerSettingsProvider"
                    serviceImplementation="com.google.idea.blaze.cpp.XcodeCompilerSettingsProviderImpl"
                    os="mac"
                    overrides="true"
    />
    <registryKey defaultValue="false" description="Disable absolute path trimming in debug clang builds" key="bazel.trim.absolute.path.disabled"/>
    <registryKey defaultValue="true" description="Allow external targets from source directories be imported in" key="bazel.cpp.sync.external.targets.from.directories"/>
    <registryKey defaultValue="false" description="Filter out some incompatible compiler flags (-include)" key="bazel.cpp.sync.workspace.filter.out.incompatible.flags"/>
    <applicationService serviceInterface="com.google.idea.blaze.cpp.CompilerVersionChecker"
                        serviceImplementation="com.google.idea.blaze.cpp.CompilerVersionCheckerImpl"/>
    <applicationService serviceInterface="com.google.idea.blaze.cpp.CompilerWrapperProvider"
                        serviceImplementation="com.google.idea.blaze.cpp.CompilerWrapperProviderImpl"/>
  </extensions>
  <extensions defaultExtensionNs="com.google.idea.blaze.qsync">
    <BlazeProjectListenerProvider implementation="com.google.idea.blaze.cpp.qsync.CcProjectModelUpdater$Provider" />
  </extensions>
</idea-plugin>
